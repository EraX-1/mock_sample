'use client';

import { useState } from 'react';

interface ApiResponse {
  status: 'success' | 'error';
  user_message?: string;
  ai_response?: string;
  response_content?: string;
  model?: string;
  response_time_ms?: number;
  error?: string;
  [key: string]: unknown;
}

interface BlobStorageResponse {
  status: 'success' | 'error';
  message?: string;
  upload_info?: any;
  sas_url?: string;
  documents?: any[];
  count?: number;
  error?: string;
  test_results?: any;
  [key: string]: unknown;
}

interface SearchResponse {
  status: 'success' | 'error';
  results?: any[];
  count?: number;
  error?: string;
  [key: string]: unknown;
}

interface IndexResponse {
  status: 'success' | 'error';
  message?: string;
  processed_chunks?: number;
  filename?: string;
  index_type?: string;
  error?: string;
  [key: string]: unknown;
}

interface DocumentIntelligenceResponse {
  status: 'success' | 'error';
  file_type?: string;
  filename?: string;
  pages_processed?: number;
  sample_content?: string;
  metadata?: any;
  message?: string;
  supported_formats?: string[];
  error?: string;
  [key: string]: unknown;
}

export default function AzureServicesTestPage() {
  // Azure OpenAI
  const [openaiMessage, setOpenaiMessage] = useState<string>(
    'Azure OpenAI„ÅÆÊé•Á∂ö„ÉÜ„Çπ„Éà„Åß„Åô'
  );
  const [openaiResponse, setOpenaiResponse] = useState<ApiResponse | null>(
    null
  );
  const [openaiLoading, setOpenaiLoading] = useState<boolean>(false);

  // Azure Blob Storage
  const [blobResponse, setBlobResponse] = useState<BlobStorageResponse | null>(
    null
  );
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [blobLoading, setBlobLoading] = useState<boolean>(false);

  // Azure AI Search
  const [searchQuery, setSearchQuery] = useState<string>('test search query');
  const [searchResponse, setSearchResponse] = useState<SearchResponse | null>(
    null
  );
  const [searchLoading, setSearchLoading] = useState<boolean>(false);

  // Real-time Indexing
  const [indexFile, setIndexFile] = useState<File | null>(null);
  const [indexResponse, setIndexResponse] = useState<IndexResponse | null>(
    null
  );
  const [indexLoading, setIndexLoading] = useState<boolean>(false);

  // Azure AI Document Intelligence
  const [docIntelFile, setDocIntelFile] = useState<File | null>(null);
  const [docIntelResponse, setDocIntelResponse] =
    useState<DocumentIntelligenceResponse | null>(null);
  const [docIntelLoading, setDocIntelLoading] = useState<boolean>(false);

  // Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâAPI URL„ÇíÂèñÂæó
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

  // Azure OpenAIÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const testOpenAIChat = async () => {
    setOpenaiLoading(true);
    try {
      const res = await fetch(`${apiUrl}/test/azure-openai/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: openaiMessage }),
      });
      const data = await res.json();
      setOpenaiResponse(data);
    } catch (error) {
      setOpenaiResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setOpenaiLoading(false);
  };

  const testOpenAIConnectivity = async () => {
    setOpenaiLoading(true);
    try {
      const res = await fetch(
        `${apiUrl}/health/azure-openai/test/connectivity`,
        {
          method: 'POST',
        }
      );
      const data = await res.json();
      setOpenaiResponse(data);
    } catch (error) {
      setOpenaiResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setOpenaiLoading(false);
  };

  // Blob StorageÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const testBlobStorageHealth = async () => {
    setBlobLoading(true);
    try {
      const res = await fetch(`${apiUrl}/api/blob-storage/health`);
      const data = await res.json();
      setBlobResponse(data);
    } catch (error) {
      setBlobResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setBlobLoading(false);
  };

  const testBlobStorageConnectivity = async () => {
    setBlobLoading(true);
    try {
      const res = await fetch(`${apiUrl}/api/blob-storage/test-connectivity`, {
        method: 'POST',
      });
      const data = await res.json();
      setBlobResponse(data);
    } catch (error) {
      setBlobResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setBlobLoading(false);
  };

  const uploadFile = async () => {
    if (!selectedFile) {
      setBlobResponse({
        status: 'error',
        error: '„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
      });
      return;
    }

    setBlobLoading(true);
    try {
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('generate_sas', 'true');

      const res = await fetch(`${apiUrl}/api/blob-storage/upload`, {
        method: 'POST',
        body: formData,
      });
      const data = await res.json();
      setBlobResponse(data);
    } catch (error) {
      setBlobResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setBlobLoading(false);
  };

  const listDocuments = async () => {
    setBlobLoading(true);
    try {
      const res = await fetch(`${apiUrl}/api/blob-storage/list`);
      const data = await res.json();
      setBlobResponse(data);
    } catch (error) {
      setBlobResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setBlobLoading(false);
  };

  // Azure AI SearchÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const testSearch = async () => {
    if (!searchQuery.trim()) {
      setSearchResponse({
        status: 'error',
        error: 'Ê§úÁ¥¢„ÇØ„Ç®„É™„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      });
      return;
    }

    setSearchLoading(true);
    try {
      const res = await fetch(
        `${apiUrl}/search?query=${encodeURIComponent(searchQuery)}`
      );
      const data = await res.json();
      setSearchResponse(data);
    } catch (error) {
      setSearchResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setSearchLoading(false);
  };

  // Real-time IndexingÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const testRealtimeIndexing = async () => {
    if (!indexFile) {
      setIndexResponse({
        status: 'error',
        error: '„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
      });
      return;
    }

    setIndexLoading(true);
    try {
      const formData = new FormData();
      formData.append('file', indexFile);

      const indexType = '01INDEX01TYPE001001001001'; // „Éá„Éï„Ç©„É´„Éà„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çø„Ç§„Éó
      const res = await fetch(
        `${apiUrl}/index?index_type=${encodeURIComponent(indexType)}`,
        {
          method: 'POST',
          body: formData,
        }
      );

      if (res.ok) {
        setIndexResponse({
          status: 'success',
          message: '„Éï„Ç°„Ç§„É´„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
          filename: indexFile.name,
          index_type: '01INDEX01TYPE001001001001',
        });
      } else {
        const errorData = await res.json();
        setIndexResponse({
          status: 'error',
          error: errorData.detail || '„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
        });
      }
    } catch (error) {
      setIndexResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setIndexLoading(false);
  };

  // Document IntelligenceÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const testDocumentIntelligence = async () => {
    if (!docIntelFile) {
      setDocIntelResponse({
        status: 'error',
        error: '„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
      });
      return;
    }

    setDocIntelLoading(true);
    try {
      const formData = new FormData();
      formData.append('file', docIntelFile);

      const res = await fetch(`${apiUrl}/test/document-intelligence`, {
        method: 'POST',
        body: formData,
      });
      const data = await res.json();
      setDocIntelResponse(data);
    } catch (error) {
      setDocIntelResponse({
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
    setDocIntelLoading(false);
  };

  const renderResponse = (response: any, title: string) => {
    if (!response) return null;

    return (
      <div className="bg-gray-100 p-4 rounded mt-4">
        <h3 className="font-semibold mb-2">{title}:</h3>
        <div className="flex items-center space-x-2 mb-2">
          <span
            className={`px-2 py-1 rounded text-sm font-medium ${
              response.status === 'success' || response.status === 'healthy'
                ? 'bg-green-100 text-green-800'
                : 'bg-red-100 text-red-800'
            }`}
          >
            {response.status}
          </span>
          {response.model && (
            <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm">
              {response.model}
            </span>
          )}
          {response.response_time_ms && (
            <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm">
              {Math.round(response.response_time_ms)}ms
            </span>
          )}
        </div>
        <pre className="text-sm overflow-auto bg-white p-2 rounded border">
          {JSON.stringify(response, null, 2)}
        </pre>
      </div>
    );
  };

  return (
    <div className="container mx-auto p-8 max-w-7xl">
      <h1 className="text-3xl font-bold mb-8 text-center">
        üî¨ Azure Services „ÉÜ„Çπ„Éà (INFRA-001, INFRA-002, INFRA-003)
      </h1>

      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6">
        {/* Azure OpenAI „ÉÜ„Çπ„Éà (INFRA-001) */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-600">
            ü§ñ Azure OpenAI (INFRA-001)
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                „ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏:
              </label>
              <textarea
                value={openaiMessage}
                onChange={e => setOpenaiMessage(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
                rows={2}
              />
            </div>

            <div className="flex flex-col space-y-2">
              <button
                onClick={testOpenAIConnectivity}
                disabled={openaiLoading}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {openaiLoading ? 'ÂÆüË°å‰∏≠...' : 'Êé•Á∂ö„ÉÜ„Çπ„Éà'}
              </button>
              <button
                onClick={testOpenAIChat}
                disabled={openaiLoading || !openaiMessage.trim()}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                {openaiLoading ? 'ÂÆüË°å‰∏≠...' : '„ÉÅ„É£„ÉÉ„Éà„ÉÜ„Çπ„Éà'}
              </button>
            </div>
          </div>

          {renderResponse(openaiResponse, 'Azure OpenAI ÁµêÊûú')}
        </div>

        {/* Azure Blob Storage „ÉÜ„Çπ„Éà (INFRA-003) */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 text-purple-600">
            üìÅ Azure Blob Storage (INFRA-003)
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                „Éï„Ç°„Ç§„É´ÈÅ∏Êäû:
              </label>
              <input
                type="file"
                onChange={e => setSelectedFile(e.target.files?.[0] || null)}
                className="w-full p-2 border border-gray-300 rounded"
              />
              {selectedFile && (
                <p className="text-sm text-gray-600 mt-1">
                  ÈÅ∏Êäû: {selectedFile.name} (
                  {Math.round(selectedFile.size / 1024)}KB)
                </p>
              )}
            </div>

            <div className="flex flex-col space-y-2">
              <button
                onClick={testBlobStorageHealth}
                disabled={blobLoading}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {blobLoading ? 'ÂÆüË°å‰∏≠...' : '„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ'}
              </button>
              <button
                onClick={testBlobStorageConnectivity}
                disabled={blobLoading}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                {blobLoading ? 'ÂÆüË°å‰∏≠...' : 'Êé•Á∂ö„ÉÜ„Çπ„Éà'}
              </button>
              <button
                onClick={uploadFile}
                disabled={blobLoading || !selectedFile}
                className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50"
              >
                {blobLoading ? 'ÂÆüË°å‰∏≠...' : '„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ'}
              </button>
              <button
                onClick={listDocuments}
                disabled={blobLoading}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                {blobLoading ? 'ÂÆüË°å‰∏≠...' : '„Éâ„Ç≠„É•„É°„É≥„Éà‰∏ÄË¶ß'}
              </button>
            </div>
          </div>

          {renderResponse(blobResponse, 'Blob Storage ÁµêÊûú')}
        </div>

        {/* Azure AI Search „ÉÜ„Çπ„Éà (INFRA-002) */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 text-green-600">
            üîç Azure AI Search (INFRA-002)
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                Ê§úÁ¥¢„ÇØ„Ç®„É™:
              </label>
              <input
                type="text"
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
                placeholder="Ê§úÁ¥¢„Åó„Åü„ÅÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
              />
            </div>

            <div className="flex flex-col space-y-2">
              <button
                onClick={testSearch}
                disabled={searchLoading || !searchQuery.trim()}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50"
              >
                {searchLoading ? 'ÂÆüË°å‰∏≠...' : 'Ê§úÁ¥¢ÂÆüË°å'}
              </button>
            </div>
          </div>

          {renderResponse(searchResponse, 'AI Search ÁµêÊûú')}
        </div>

        {/* Real-time Indexing „ÉÜ„Çπ„Éà */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 text-blue-600">
            ‚ö° „É™„Ç¢„É´„Çø„Ç§„É†„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ„Åô„Çã„Éï„Ç°„Ç§„É´:
              </label>
              <input
                type="file"
                accept=".pdf,.docx,.pptx,.html,.xlsx,.xls,.xlsm,.png,.jpg,.jpeg"
                onChange={e => setIndexFile(e.target.files?.[0] || null)}
                className="w-full p-2 border border-gray-300 rounded"
              />
              {indexFile && (
                <p className="text-sm text-gray-600 mt-1">
                  ÈÅ∏Êäû: {indexFile.name} ({Math.round(indexFile.size / 1024)}KB)
                </p>
              )}
            </div>

            <div className="flex flex-col space-y-2">
              <button
                onClick={testRealtimeIndexing}
                disabled={indexLoading || !indexFile}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
              >
                {indexLoading ? 'Âá¶ÁêÜ‰∏≠...' : '‚ö° „É™„Ç¢„É´„Çø„Ç§„É†„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ'}
              </button>
            </div>
          </div>

          {renderResponse(indexResponse, '„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ ÁµêÊûú')}
        </div>

        {/* Azure AI Document Intelligence „ÉÜ„Çπ„Éà (INFRA-004) */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-semibold mb-4 text-orange-600">
            üìÑ Azure AI Document Intelligence (INFRA-004)
          </h2>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                PDF„Åæ„Åü„ÅØÁîªÂÉè„Éï„Ç°„Ç§„É´:
              </label>
              <input
                type="file"
                accept=".pdf,.png,.jpg,.jpeg"
                onChange={e => setDocIntelFile(e.target.files?.[0] || null)}
                className="w-full p-2 border border-gray-300 rounded"
              />
              {docIntelFile && (
                <p className="text-sm text-gray-600 mt-1">
                  ÈÅ∏Êäû: {docIntelFile.name} (
                  {Math.round(docIntelFile.size / 1024)}KB)
                </p>
              )}
            </div>

            <div className="flex flex-col space-y-2">
              <button
                onClick={testDocumentIntelligence}
                disabled={docIntelLoading || !docIntelFile}
                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
              >
                {docIntelLoading ? 'Âá¶ÁêÜ‰∏≠...' : 'üìÑ ÊñáÊõ∏Ëß£Êûê„ÉÜ„Çπ„Éà'}
              </button>
            </div>
          </div>

          {renderResponse(docIntelResponse, 'Document Intelligence ÁµêÊûú')}
        </div>
      </div>

      {/* ‰ΩøÁî®ÊñπÊ≥ïË™¨Êòé */}
      <div className="bg-white rounded-lg shadow-md p-6 mt-8">
        <h2 className="text-xl font-semibold mb-4">üìã ‰ΩøÁî®ÊñπÊ≥ï</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <h3 className="font-semibold text-blue-600 mb-2">
              ü§ñ Azure OpenAI
            </h3>
            <ul className="list-disc pl-5 space-y-1 text-sm">
              <li>
                <strong>Êé•Á∂ö„ÉÜ„Çπ„Éà</strong>: Azure OpenAI API„Å∏„ÅÆÂü∫Êú¨Êé•Á∂öÁ¢∫Ë™ç
              </li>
              <li>
                <strong>„ÉÅ„É£„ÉÉ„Éà„ÉÜ„Çπ„Éà</strong>:
                „Ç´„Çπ„Çø„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅßAIÂøúÁ≠î„ÉÜ„Çπ„Éà
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold text-purple-600 mb-2">
              üìÅ Blob Storage
            </h3>
            <ul className="list-disc pl-5 space-y-1 text-sm">
              <li>
                <strong>„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ</strong>:
                „Çπ„Éà„É¨„Éº„Ç∏„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂÅ•Â∫∑Áä∂ÊÖãÁ¢∫Ë™ç
              </li>
              <li>
                <strong>Êé•Á∂ö„ÉÜ„Çπ„Éà</strong>: „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÉªÂâäÈô§„ÅÆÁ∑èÂêà„ÉÜ„Çπ„Éà
              </li>
              <li>
                <strong>„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ</strong>:
                ÂÆüÈöõ„ÅÆ„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºãSAS URLÁîüÊàê
              </li>
              <li>
                <strong>„Éâ„Ç≠„É•„É°„É≥„Éà‰∏ÄË¶ß</strong>: ‰øùÂ≠òÊ∏à„Åø„Éï„Ç°„Ç§„É´‰∏ÄË¶ßË°®Á§∫
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold text-green-600 mb-2">üîç AI Search</h3>
            <ul className="list-disc pl-5 space-y-1 text-sm">
              <li>
                <strong>Ê§úÁ¥¢ÂÆüË°å</strong>: „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Åã„Çâ„ÅÆ„Éâ„Ç≠„É•„É°„É≥„ÉàÊ§úÁ¥¢
              </li>
              <li>
                „Éè„Ç§„Éñ„É™„ÉÉ„ÉâÊ§úÁ¥¢Ôºà„Ç≠„Éº„ÉØ„Éº„ÉâÔºã„Éô„ÇØ„Çø„ÉºÔºã„Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØÔºâÂØæÂøú
              </li>
              <li>Êó•Êú¨Ë™ûËß£ÊûêÂô®Ôºàja.microsoftÔºâ‰ΩøÁî®</li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold text-blue-600 mb-2">
              ‚ö° „É™„Ç¢„É´„Çø„Ç§„É†„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ
            </h3>
            <ul className="list-disc pl-5 space-y-1 text-sm">
              <li>
                <strong>Âç≥Â∫ß„Å´„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ</strong>:
                „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü„Å®ÂêåÊôÇ„Å´Ê§úÁ¥¢ÂèØËÉΩ
              </li>
              <li>
                ÂØæÂøúÂΩ¢Âºè: PDF, DOCX, PPTX, HTML, Excel, ÁîªÂÉèÔºàPNG, JPG, JPEGÔºâ
              </li>
              <li>
                „ÉÜ„Ç≠„Çπ„ÉàÊäΩÂá∫ ‚Üí Âüã„ÇÅËæº„Åø„Éô„ÇØ„Çø„ÉºÁîüÊàê ‚Üí „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÁôªÈå≤„ÇíËá™ÂãïÂÆüË°å
              </li>
              <li>keywords „Éï„Ç£„Éº„É´„Éâ: „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éò„ÉÉ„ÉÄ„Éº„Åã„ÇâËá™ÂãïÊäΩÂá∫</li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold text-orange-600 mb-2">
              üìÑ Document Intelligence
            </h3>
            <ul className="list-disc pl-5 space-y-1 text-sm">
              <li>
                <strong>ÊñáÊõ∏Ëß£Êûê„ÉÜ„Çπ„Éà</strong>: PDF„ÉªÁîªÂÉè„Åã„Çâ„ÉÜ„Ç≠„Çπ„ÉàÊäΩÂá∫
              </li>
              <li>„É¨„Ç§„Ç¢„Ç¶„ÉàË™çË≠ò„Å®ÊßãÈÄ†Âåñ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥Â§âÊèõ</li>
              <li>ÂØæÂøúÂΩ¢Âºè: PDF, PNG, JPG, JPEG</li>
              <li>OCRÊ©üËÉΩ„ÅßÊâãÊõ∏„Åç„ÉªÂç∞Âà∑ÊñáÂ≠ó„ÇíË™çË≠ò</li>
              <li>Êó•Êú¨Ë™ûÊñáÊõ∏„ÅÆÈ´òÁ≤æÂ∫¶Ëß£Êûê</li>
            </ul>
          </div>
        </div>

        <div className="mt-4 p-4 bg-yellow-50 rounded">
          <h3 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è Ê≥®ÊÑè‰∫ãÈ†Ö:</h3>
          <ul className="text-yellow-700 text-sm space-y-1">
            <li>‚Ä¢ „Åì„ÅÆ„Éö„Éº„Ç∏„ÅØÈñãÁô∫„Éª„ÉÜ„Çπ„ÉàÂ∞ÇÁî®„Åß„Åô</li>
            <li>‚Ä¢ Êú¨Áï™Áí∞Â¢É„Åß„ÅØÈÅ©Âàá„Å™„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°„ÇíÂÆüË£Ö„Åó„Å¶„Åè„Å†„Åï„ÅÑ</li>
            <li>
              ‚Ä¢ „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Åü„Éï„Ç°„Ç§„É´„ÅØÂÆüÈöõ„Å´Azure Blob Storage„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åô
            </li>
            <li>‚Ä¢ SAS URL„ÅØ24ÊôÇÈñìÊúâÂäπ„Åß„Åô</li>
            <li>‚Ä¢ „É™„Ç¢„É´„Çø„Ç§„É†„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂåñ„ÅØÂç≥Â∫ß„Å´Ê§úÁ¥¢ÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô</li>
            <li>‚Ä¢ „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„ÅÑÂ†¥Âêà„ÅØÂá¶ÁêÜÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„Åô</li>
            <li>‚Ä¢ Document Intelligence„ÅØÈ´òÁ≤æÂ∫¶„Å™PDF„ÉªÁîªÂÉèËß£Êûê„ÇíÊèê‰æõ„Åó„Åæ„Åô</li>
            <li>‚Ä¢ Âá¶ÁêÜÊôÇÈñì„ÅØ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Å®Ë§áÈõë„Åï„Å´‰æùÂ≠ò„Åó„Åæ„Åô</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

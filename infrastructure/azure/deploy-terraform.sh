#!/bin/bash
# ========================================
# Automated Terraform Deployment Script
# Yuyama RAG System - Azure Infrastructure
# ========================================

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="${SCRIPT_DIR}/terraform"
LOG_FILE="${SCRIPT_DIR}/terraform-deploy.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[WARNING $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO $(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}\n\n# Check prerequisites\ncheck_prerequisites() {\n    log \"Checking prerequisites...\"\n    \n    # Check if Azure CLI is installed and logged in\n    if ! command -v az &> /dev/null; then\n        error \"Azure CLI is not installed. Please install it first.\"\n        exit 1\n    fi\n    \n    # Check if logged in to Azure\n    if ! az account show &> /dev/null; then\n        error \"Not logged in to Azure. Please run 'az login' first.\"\n        exit 1\n    fi\n    \n    # Check if Terraform is installed\n    if ! command -v terraform &> /dev/null; then\n        error \"Terraform is not installed. Please install it first.\"\n        exit 1\n    fi\n    \n    # Check if resource group exists\n    if ! az group show --name yuyama &> /dev/null; then\n        warning \"Resource group 'yuyama' does not exist. Creating it...\"\n        az group create --name yuyama --location \"Japan East\"\n        log \"Resource group 'yuyama' created successfully.\"\n    fi\n    \n    log \"Prerequisites check completed.\"\n}\n\n# Initialize Terraform\ninit_terraform() {\n    log \"Initializing Terraform...\"\n    cd \"$TERRAFORM_DIR\"\n    \n    # Initialize Terraform\n    if terraform init; then\n        log \"Terraform initialization completed successfully.\"\n    else\n        error \"Terraform initialization failed.\"\n        exit 1\n    fi\n}\n\n# Plan Terraform deployment\nplan_terraform() {\n    log \"Planning Terraform deployment...\"\n    \n    # Check if tfvars file exists\n    if [[ ! -f \"terraform.tfvars\" ]]; then\n        warning \"terraform.tfvars not found. Using default values from terraform.tfvars.example\"\n        cp terraform.tfvars.example terraform.tfvars\n        warning \"Please review and customize terraform.tfvars before running apply.\"\n    fi\n    \n    # Generate plan\n    if terraform plan -out=tfplan; then\n        log \"Terraform plan generated successfully.\"\n        return 0\n    else\n        error \"Terraform plan failed.\"\n        return 1\n    fi\n}\n\n# Apply Terraform deployment\napply_terraform() {\n    log \"Applying Terraform deployment...\"\n    \n    if terraform apply tfplan; then\n        log \"Terraform deployment completed successfully.\"\n        return 0\n    else\n        error \"Terraform deployment failed.\"\n        return 1\n    fi\n}\n\n# Extract outputs\nextract_outputs() {\n    log \"Extracting Terraform outputs...\"\n    \n    # Create outputs directory\n    mkdir -p \"${SCRIPT_DIR}/outputs\"\n    \n    # Extract sensitive outputs to separate files\n    terraform output -json > \"${SCRIPT_DIR}/outputs/terraform-outputs.json\"\n    \n    # Extract key values for environment configuration\n    OPENAI_ENDPOINT=$(terraform output -raw openai_endpoint)\n    SEARCH_ENDPOINT=$(terraform output -raw search_endpoint)\n    KEY_VAULT_URI=$(terraform output -raw key_vault_uri)\n    MANAGED_IDENTITY_CLIENT_ID=$(terraform output -raw managed_identity_client_id)\n    STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)\n    \n    # Create environment file\n    cat > \"${SCRIPT_DIR}/outputs/azure-env.sh\" << EOF\n#!/bin/bash\n# Azure Environment Variables\n# Generated by Terraform deployment\n\nexport AZURE_OPENAI_ENDPOINT=\"$OPENAI_ENDPOINT\"\nexport AZURE_SEARCH_ENDPOINT=\"$SEARCH_ENDPOINT\"\nexport AZURE_KEY_VAULT_URI=\"$KEY_VAULT_URI\"\nexport AZURE_MANAGED_IDENTITY_CLIENT_ID=\"$MANAGED_IDENTITY_CLIENT_ID\"\nexport AZURE_STORAGE_ACCOUNT_NAME=\"$STORAGE_ACCOUNT_NAME\"\n\n# For App Service configuration\nexport AZURE_OPENAI_API_KEY=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=openai-api-key)\"\nexport AZURE_SEARCH_ADMIN_KEY=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=search-admin-key)\"\nexport AZURE_STORAGE_CONNECTION_STRING=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=storage-connection-string)\"\nexport APPLICATIONINSIGHTS_CONNECTION_STRING=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=appinsights-connection-string)\"\nEOF\n    \n    chmod +x \"${SCRIPT_DIR}/outputs/azure-env.sh\"\n    \n    log \"Outputs extracted to ${SCRIPT_DIR}/outputs/\"\n    info \"Environment variables file: ${SCRIPT_DIR}/outputs/azure-env.sh\"\n    info \"Full outputs JSON: ${SCRIPT_DIR}/outputs/terraform-outputs.json\"\n}\n\n# Update App Service configuration\nupdate_app_service_config() {\n    log \"Updating App Service configuration with Key Vault references...\"\n    \n    # Get Managed Identity Client ID\n    MANAGED_IDENTITY_CLIENT_ID=$(terraform output -raw managed_identity_client_id)\n    \n    # App Service configurations\n    APP_SERVICES=(\"yuyama-rag-chatbot-frontend\" \"yuyama-rag-chatbot-api\")\n    \n    for app_service in \"${APP_SERVICES[@]}\"; do\n        if az webapp show --name \"$app_service\" --resource-group yuyama &> /dev/null; then\n            log \"Updating configuration for $app_service...\"\n            \n            # Assign managed identity to App Service\n            az webapp identity assign \\\n                --name \"$app_service\" \\\n                --resource-group yuyama \\\n                --identities \"/subscriptions/$(az account show --query id -o tsv)/resourcegroups/yuyama/providers/Microsoft.ManagedIdentity/userAssignedIdentities/yuyama-managed-identity\"\n            \n            # Update app settings with Key Vault references\n            az webapp config appsettings set \\\n                --name \"$app_service\" \\\n                --resource-group yuyama \\\n                --settings \\\n                AZURE_OPENAI_ENDPOINT=\"$(terraform output -raw openai_endpoint)\" \\\n                AZURE_OPENAI_API_KEY=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=openai-api-key)\" \\\n                AZURE_SEARCH_ENDPOINT=\"$(terraform output -raw search_endpoint)\" \\\n                AZURE_SEARCH_ADMIN_KEY=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=search-admin-key)\" \\\n                AZURE_STORAGE_ACCOUNT_NAME=\"$(terraform output -raw storage_account_name)\" \\\n                AZURE_STORAGE_CONNECTION_STRING=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=storage-connection-string)\" \\\n                APPLICATIONINSIGHTS_CONNECTION_STRING=\"@Microsoft.KeyVault(VaultName=yuyama-keyvault;SecretName=appinsights-connection-string)\" \\\n                AZURE_CLIENT_ID=\"$MANAGED_IDENTITY_CLIENT_ID\" \\\n                USE_MOCK_SERVICES=\"false\"\n            \n            log \"Configuration updated for $app_service\"\n        else\n            warning \"App Service $app_service not found. Skipping configuration update.\"\n        fi\n    done\n}\n\n# Verify deployment\nverify_deployment() {\n    log \"Verifying deployment...\"\n    \n    # Check OpenAI Service\n    if az cognitiveservices account show --name yuyama-openai --resource-group yuyama &> /dev/null; then\n        log \"✓ Azure OpenAI Service deployed successfully\"\n    else\n        error \"✗ Azure OpenAI Service deployment failed\"\n        return 1\n    fi\n    \n    # Check AI Search\n    if az search service show --name yuyama-ai-search --resource-group yuyama &> /dev/null; then\n        log \"✓ Azure AI Search deployed successfully\"\n    else\n        error \"✗ Azure AI Search deployment failed\"\n        return 1\n    fi\n    \n    # Check Key Vault\n    if az keyvault show --name yuyama-keyvault --resource-group yuyama &> /dev/null; then\n        log \"✓ Azure Key Vault deployed successfully\"\n    else\n        error \"✗ Azure Key Vault deployment failed\"\n        return 1\n    fi\n    \n    # Check Storage Account\n    if az storage account show --name yuyamablob --resource-group yuyama &> /dev/null; then\n        log \"✓ Azure Storage Account deployed successfully\"\n    else\n        error \"✗ Azure Storage Account deployment failed\"\n        return 1\n    fi\n    \n    log \"All services deployed and verified successfully!\"\n}\n\n# Main execution\nmain() {\n    log \"Starting Yuyama RAG System Azure Infrastructure Deployment\"\n    log \"============================================================\"\n    \n    # Parse command line arguments\n    ACTION=${1:-\"plan\"}\n    \n    case $ACTION in\n        \"init\")\n            check_prerequisites\n            init_terraform\n            ;;\n        \"plan\")\n            check_prerequisites\n            init_terraform\n            plan_terraform\n            ;;\n        \"apply\")\n            check_prerequisites\n            init_terraform\n            if plan_terraform; then\n                apply_terraform\n                extract_outputs\n                update_app_service_config\n                verify_deployment\n            fi\n            ;;\n        \"destroy\")\n            check_prerequisites\n            init_terraform\n            log \"WARNING: This will destroy all infrastructure!\"\n            read -p \"Are you sure you want to continue? (yes/no): \" -r\n            if [[ $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then\n                terraform destroy\n            else\n                log \"Destroy cancelled.\"\n            fi\n            ;;\n        \"outputs\")\n            cd \"$TERRAFORM_DIR\"\n            extract_outputs\n            ;;\n        *)\n            echo \"Usage: $0 {init|plan|apply|destroy|outputs}\"\n            echo \"\"\n            echo \"Commands:\"\n            echo \"  init     - Initialize Terraform\"\n            echo \"  plan     - Plan the deployment\"\n            echo \"  apply    - Apply the deployment\"\n            echo \"  destroy  - Destroy the infrastructure\"\n            echo \"  outputs  - Extract outputs only\"\n            exit 1\n            ;;\n    esac\n    \n    log \"Deployment script completed successfully!\"\n}\n\n# Trap errors and cleanup\ntrap 'error \"Script failed on line $LINENO\"' ERR\n\n# Run main function\nmain \"$@\""
